// Code generated by mockery v2.14.0. DO NOT EDIT.

package UsersServices

import (
	dtos "github.com/HenCor2019/task-go/api/users/dtos"
	mock "github.com/stretchr/testify/mock"

	models "github.com/HenCor2019/task-go/api/models"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: createUserDto
func (_m *MockUserService) CreateUser(createUserDto dtos.CreateUserDto) models.User {
	ret := _m.Called(createUserDto)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(dtos.CreateUserDto) models.User); ok {
		r0 = rf(createUserDto)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// DeleteById provides a mock function with given fields: userId
func (_m *MockUserService) DeleteById(userId string) models.User {
	ret := _m.Called(userId)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// Find provides a mock function with given fields:
func (_m *MockUserService) Find() []models.User {
	ret := _m.Called()

	var r0 []models.User
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	return r0
}

// FindById provides a mock function with given fields: userId
func (_m *MockUserService) FindById(userId string) models.User {
	ret := _m.Called(userId)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

type mockConstructorTestingTNewMockUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserService(t mockConstructorTestingTNewMockUserService) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
