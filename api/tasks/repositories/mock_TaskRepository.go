// Code generated by mockery v2.14.0. DO NOT EDIT.

package TasksRepositories

import (
	models "github.com/HenCor2019/task-go/api/models"
	mock "github.com/stretchr/testify/mock"

	tasksDtos "github.com/HenCor2019/task-go/api/tasks/dtos"
)

// MockTaskRepository is an autogenerated mock type for the TaskRepository type
type MockTaskRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: createTaskDto, userId
func (_m *MockTaskRepository) Create(createTaskDto tasksDtos.CreateTaskDto, userId uint) (models.Task, error) {
	ret := _m.Called(createTaskDto, userId)

	var r0 models.Task
	if rf, ok := ret.Get(0).(func(tasksDtos.CreateTaskDto, uint) models.Task); ok {
		r0 = rf(createTaskDto, userId)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tasksDtos.CreateTaskDto, uint) error); ok {
		r1 = rf(createTaskDto, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: taskId
func (_m *MockTaskRepository) DeleteById(taskId string) error {
	ret := _m.Called(taskId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: taskId, userId
func (_m *MockTaskRepository) FindById(taskId string, userId uint) (models.Task, error) {
	ret := _m.Called(taskId, userId)

	var r0 models.Task
	if rf, ok := ret.Get(0).(func(string, uint) models.Task); ok {
		r0 = rf(taskId, userId)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(taskId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserById provides a mock function with given fields: userId
func (_m *MockTaskRepository) FindUserById(userId string) (models.User, error) {
	ret := _m.Called(userId)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTaskRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTaskRepository creates a new instance of MockTaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTaskRepository(t mockConstructorTestingTNewMockTaskRepository) *MockTaskRepository {
	mock := &MockTaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
